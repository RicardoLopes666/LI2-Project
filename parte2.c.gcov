        -:    0:Source:parte2/parte2.c
        -:    0:Graph:parte2/parte2.gcno
        -:    0:Data:parte2/parte2.gcda
        -:    0:Runs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdbool.h>
        -:    3:#include "../tipos.h"
        -:    4:#include "../parte1/parte1.h"
        -:    5:#include <ctype.h> // Para usar a função isupper
        -:    6:#include <stdio.h>
        -:    7:#include "../parte3/parte3.h"
        -:    8:#include "../colors.h"
        -:    9:
        -:   10:// _________ Funções utilizadas para voltar atrás -> comando 'd' ____________
        -:   11:
       25:   12:bool initStackTabs(STACKTABS s)
        -:   13:{
       25:   14:    s->capacidade = 3;
       25:   15:    s->indice = 0;
       25:   16:    s->comprimento = 0;
       25:   17:    s->tabelas = malloc(sizeof(TABELA) * 3);
       25:   18:    if (s->tabelas == NULL)
    #####:   19:        return false;
        -:   20:    return true;
        -:   21:}
        -:   22:
        -:   23:// Função que insere uma tabela ao array de tabelas
       24:   24:bool insereTabela(STACKTABS s, TABELA tab)
        -:   25:{
       24:   26:    if (s->indice < s->comprimento) // Neste caso tem de se que dar free das tabela que estão para a frente e adicionar a nova tabela
        -:   27:    {
        2:   28:        for (int i = s->indice; i < s->comprimento; i++)
        1:   29:            freeTabela(s->tabelas[i]);
        -:   30:
        1:   31:        s->comprimento = s->indice;
        -:   32:    }
        -:   33:
       23:   34:    else if (s->comprimento >= s->capacidade)
        -:   35:    {
        1:   36:        s->capacidade = s->capacidade == 0 ? 1 : 2 * s->capacidade;
        1:   37:        TABELA *new;
        1:   38:        new = realloc(s->tabelas, s->capacidade * sizeof(TABELA));
        1:   39:        if (new == NULL)
        -:   40:            return false;
        1:   41:        s->tabelas = new;
        -:   42:    }
       24:   43:    s->tabelas[s->comprimento++] = tab;
       24:   44:    s->indice++;
       24:   45:    return true;
        -:   46:}
        -:   47:
        -:   48:TABELA copiarTabela(TABELA t); // Para poder usar em deleteTabela
        -:   49:
        5:   50:bool deleteTabela(GAME *game)
        -:   51:{                                                                         // Apenas se reduz o indice caso possivel
        5:   52:    if (game->stackTabs->comprimento <= 1 || game->stackTabs->indice < 2) // Dá erro se tentar eliminar a tabela inicial
        -:   53:        return false;
        2:   54:    freeTabela(game->tab);
        2:   55:    game->tab = copiarTabela(game->stackTabs->tabelas[game->stackTabs->indice-- - 2]);
        2:   56:    return true;
        -:   57:}
        -:   58:
        -:   59:// Função que faz uma cópia do elementos de uma tabela para uma outra criada com malloc e devolve o novo endereço
       39:   60:TABELA copiarTabela(TABELA t)
        -:   61:{
       39:   62:    TABELA new = malloc(sizeof(struct Tabela));
       39:   63:    if (new == NULL)
        -:   64:    {
        -:   65:        return NULL;
        -:   66:    }
       39:   67:    new->c = t->c;
       39:   68:    new->l = t->l;
       39:   69:    new->tabela = malloc(t->l * sizeof(char *));
       39:   70:    if (new->tabela == NULL)
        -:   71:    {
    #####:   72:        free(new);
    #####:   73:        return NULL;
        -:   74:    }
      102:   75:    for (int i = 0; i < t->l; i++)
        -:   76:    {
       63:   77:        new->tabela[i] = malloc((t->c + 1) * sizeof(char)); // + 1 para colocar o '\0'
       63:   78:        if (new->tabela[i] == NULL)
        -:   79:        {
    #####:   80:            for (int j = 0; j < i; j++)
        -:   81:            {
    #####:   82:                free(new->tabela[j]);
        -:   83:            }
    #####:   84:            free(new->tabela);
    #####:   85:            free(new);
    #####:   86:            return NULL;
        -:   87:        }
      235:   88:        for (int j = 0; j <= t->c; j++)
        -:   89:        {
      172:   90:            if (j == t->c)
       63:   91:                new->tabela[i][j] = '\0';
        -:   92:            else
      109:   93:                new->tabela[i][j] = t->tabela[i][j];
        -:   94:        }
        -:   95:    }
        -:   96:    return new;
        -:   97:}
        -:   98:
        -:   99:// Liberta a memória alocada para a lista de tabuleiros
       16:  100:void freeStackTabs(STACKTABS s)
        -:  101:{
       16:  102:    if (s != NULL)
        -:  103:    {
       25:  104:        for (int i = 0; i < s->comprimento; i++)
        -:  105:        {
       10:  106:            freeTabela(s->tabelas[i]);
        -:  107:        }
       15:  108:        free(s->tabelas);
       15:  109:        free(s);
        -:  110:    }
       16:  111:}
        -:  112:
        2:  113:void u(GAME *game, bool *comandoProcessado)
        -:  114:{
        2:  115:    if (game->stackTabs->indice >= game->stackTabs->comprimento)
        1:  116:        fprintf(stderr, "%sErro: Não existem tabuleiros mais para a frente%s\n", ERROR_COLOR, RESET);
        -:  117:    else
        -:  118:    {
        1:  119:        freeTabela(game->tab);
        1:  120:        game->tab = copiarTabela(game->stackTabs->tabelas[game->stackTabs->indice++]);
        -:  121:    }
        -:  122:
        2:  123:    *comandoProcessado = true;
        2:  124:}
        -:  125:
        2:  126:void d(GAME *game, bool *comandoProcessado)
        -:  127:{
        2:  128:    if (!deleteTabela(game))
        -:  129:    {
        1:  130:        fprintf(stderr, "%sErro: Não existem tabuleiros anteriores%s\n", ERROR_COLOR, RESET);
        -:  131:    }
        -:  132:
        2:  133:    *comandoProcessado = true;
        2:  134:}
        -:  135:
        -:  136:// _____ Funçãoes utilizadas para verificar as restrições -> comando 'v'______
        -:  137:
        -:  138:// Função auxiliar para verificar se uma célula está dentro dos limites do tabuleiro
      422:  139:bool dentroDosLimites(TABELA t, int linha, int coluna)
        -:  140:{
      422:  141:    return linha >= 0 && linha < t->l && coluna >= 0 && coluna < t->c;
        -:  142:}
        -:  143:
        -:  144:// Função que verifica a vizinhança de uma casa riscada e caso tenha alguma casa riscada conta como restrição
        -:  145:// Retorna o número de restrições violadas e preenche o array `restricoes` com as coordenadas
       17:  146:int verificaRiscadaVizinhasBrancas(TABELA t, int linha, int coluna, int restricoes[][2])
        -:  147:{
       17:  148:    if (!dentroDosLimites(t, linha, coluna) || t->tabela[linha][coluna] != '#')
        -:  149:    {
        -:  150:        return 0; // A célula não é uma casa riscada
        -:  151:    }
        -:  152:
       15:  153:    int direcoes[4][2] = {
        -:  154:        {-1, 0}, // Cima
        -:  155:        {1, 0},  // Baixo
        -:  156:        {0, -1}, // Esquerda
        -:  157:        {0, 1}   // Direita
        -:  158:    };
        -:  159:
       15:  160:    int count = 0; // Contador de restrições violadas
        -:  161:
       75:  162:    for (int i = 0; i < 4; i++)
        -:  163:    {
       60:  164:        int novaLinha = linha + direcoes[i][0];
       60:  165:        int novaColuna = coluna + direcoes[i][1];
        -:  166:
       60:  167:        if (dentroDosLimites(t, novaLinha, novaColuna))
        -:  168:        {
       32:  169:            if (t->tabela[novaLinha][novaColuna] == '#')
        -:  170:            {
        -:  171:                // Se encontrar uma casa riscada na vizinhança, adiciona como restrição
       12:  172:                restricoes[count][0] = novaLinha;
       12:  173:                restricoes[count][1] = novaColuna;
       12:  174:                count++;
        -:  175:            }
        -:  176:        }
        -:  177:    }
        -:  178:
        -:  179:    return count; // Retorna o número de restrições violadas
        -:  180:}
        -:  181:
        -:  182:// Função que verifica se existem duas casas brancas iguais na mesma linha ou coluna
       19:  183:bool verificaLetraIgualLinhaColuna(TABELA t, int linha, int coluna)
        -:  184:{
       19:  185:    if (!dentroDosLimites(t, linha, coluna) || !isupper(t->tabela[linha][coluna]))
        -:  186:    {
        -:  187:        return false; // A célula não é uma casa branca
        -:  188:    }
        -:  189:
        -:  190:    char letraMaiuscula = t->tabela[linha][coluna];
        -:  191:
        -:  192:    // Verifica a linha
       53:  193:    for (int j = 0; j < t->c; j++)
        -:  194:    {
       35:  195:        if (j != coluna && t->tabela[linha][j] == letraMaiuscula)
        -:  196:        {
        -:  197:            return true; // Encontrou outra casa branca igual na mesma linha
        -:  198:        }
        -:  199:    }
        -:  200:
        -:  201:    // Verifica a coluna
       44:  202:    for (int i = 0; i < t->l; i++)
        -:  203:    {
       30:  204:        if (i != linha && t->tabela[i][coluna] == letraMaiuscula)
        -:  205:        {
        -:  206:            return true; // Encontrou outra casa branca igual na mesma coluna
        -:  207:        }
        -:  208:    }
        -:  209:
        -:  210:    return false; // Não encontrou casas brancas iguais na mesma linha ou coluna
        -:  211:}
        -:  212:
        -:  213:// Função que trata das restrições que são vistas casa a casa (colocar em branco à volta de uma riscada e avisar letras que se repetem maiusculas)
       39:  214:void verificaRiscadasERepetidas(TABELA t, int i, int j, int *contaRestricoes, bool *temRestricoes, bool escreve)
        -:  215:{
        -:  216:    // Verifica restrições para casas riscadas
       39:  217:    if (t->tabela[i][j] == '#')
        -:  218:    {
       12:  219:        int restricoes[4][2]; // Máximo de 4 vizinhos
       12:  220:        int numRestricoes = verificaRiscadaVizinhasBrancas(t, i, j, restricoes);
        -:  221:
       12:  222:        if (numRestricoes > 0)
        -:  223:        {
        5:  224:            *temRestricoes = true;
        5:  225:            if (escreve)
        -:  226:            {
        1:  227:                printf("\n%s%s---- Restrição nº %d ----%s\n", HINT_COLOR, BOLD, *contaRestricoes + 1, RESET);
        1:  228:                printf("Casa riscada em (%c%d) tem restrições violadas (apenas deveria ter casas brancas na sua vizinhança) nas seguintes coordenadas:\n", 'a' + j, i + 1);
        -:  229:
        2:  230:                for (int k = 0; k < numRestricoes; k++)
        -:  231:                {
        1:  232:                    printf("  - Coluna: %c, Linha: %d\n", 'a' + restricoes[k][1], restricoes[k][0] + 1);
        -:  233:                }
        -:  234:            }
        5:  235:            (*contaRestricoes)++;
        -:  236:        }
        -:  237:    }
        -:  238:
        -:  239:    // Verifica restrições para casas brancas
       39:  240:    if (isupper(t->tabela[i][j]))
        -:  241:    {
       19:  242:        if (verificaLetraIgualLinhaColuna(t, i, j))
        -:  243:        {
        5:  244:            *temRestricoes = true;
        5:  245:            if (escreve)
        -:  246:            {
        1:  247:                printf("\n%s%s---- Restrição nº %d ----%s\n", HINT_COLOR, BOLD, *contaRestricoes + 1, RESET);
        1:  248:                printf("Casa branca em (%c%d) tem restrições violadas (letra repetida na mesma linha ou coluna).\n", 'a' + j, i + 1);
        -:  249:            }
        5:  250:            (*contaRestricoes)++;
        -:  251:        }
        -:  252:    }
       39:  253:}
        -:  254:
        -:  255:// Função que imprime as restrições do jogo caso estas existam
       13:  256:bool verificaRestricoes(TABELA t, bool escreve)
        -:  257:{
       13:  258:    bool temRestricoes = false;
       13:  259:    int contaRestricoes = 0;
        -:  260:    // Percorre todas as células do tabuleiro
       34:  261:    for (int i = 0; i < t->l; i++)
        -:  262:    {
       57:  263:        for (int j = 0; j < t->c; j++)
        -:  264:        {
        -:  265:            // Trata das restrições que são vistas casa a casa (colocar em branco à volta de uma riscada e avisar letras que se repetem maiusculas)
       36:  266:            verificaRiscadasERepetidas(t, i, j, &contaRestricoes, &temRestricoes, escreve);
        -:  267:        }
        -:  268:    }
        -:  269:
        -:  270:    // Função que chama as funções auxiliares necessarias para verificar se existem caminhos ortogonais e trata as respetivas mensagens no terminal
       13:  271:    if (!trataCaminhoOrtogonal(t, &contaRestricoes, &temRestricoes, escreve))
        -:  272:    {
        -:  273:        return false;
        -:  274:    }
        -:  275:
       13:  276:    if (!temRestricoes)
        -:  277:    {
       11:  278:        if (escreve)
        1:  279:            printf("%sNenhuma restrição foi violada no tabuleiro.%s\n", GREEN, RESET);
        -:  280:    }
        -:  281:
       13:  282:    return temRestricoes;
        -:  283:}
        -:  284:
        2:  285:void v(GAME game, bool *continuar, bool *comandoProcessado)
        -:  286:{
        2:  287:    if (game.tab == NULL)
        -:  288:    {
        1:  289:        fprintf(stderr, "%sErro: tabuleiro não carregado.%s\n", ERROR_COLOR, RESET);
        1:  290:        *continuar = false;
        -:  291:    }
        -:  292:    else
        -:  293:    {
        1:  294:        printf("%sA verificar as restrições do tabuleiro...%s\n", HINT_COLOR, RESET);
        1:  295:        verificaRestricoes(game.tab, true);
        1:  296:        *comandoProcessado = true;
        -:  297:    }
        2:  298:}
