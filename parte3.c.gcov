        -:    0:Source:parte3/parte3.c
        -:    0:Graph:parte3/parte3.gcno
        -:    0:Data:parte3/parte3.gcda
        -:    0:Runs:2
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "../tipos.h"
        -:    4:#include "../parte2/parte2.h"
        -:    5:#include <ctype.h>
        -:    6:
        -:    7:// Função que dada uma tabela a percorre por ordem de linhas e colunas até encontrar o primeiro elemento que não estiver riscado, o qual vai ser utilizado para o bfs e devolve esse elemento como uma coordenada
        4:    8:COORDENADA devolvePrimeroNRiscado(TABELA t)
        -:    9:{
        4:   10:    int i = 0;
       10:   11:    while (i < (t->c * t->l) && t->tabela[i / t->c][i % t->c] == '#')
        6:   12:        i++;
        4:   13:    if (i >= t->c * t->l)
        -:   14:        return NULL;
        4:   15:    COORDENADA pos = malloc(sizeof(struct Coordenada));
        4:   16:    pos->l = i / t->c;
        4:   17:    pos->c = i % t->c;
        4:   18:    return pos;
        -:   19:}
        -:   20:
        -:   21:// Função que inicializa o array de visitados com 0 exceto nas casas que estão riscas (0 -> não visitado, 1 -> visitado)
        6:   22:int **initVisited(TABELA t, int *count) // Count conta o número de casas visitadas
        -:   23:{
        6:   24:    int **visited = malloc(sizeof(int *) * t->l);
       24:   25:    for (int i = 0; i < t->l; i++)
        -:   26:    {
       18:   27:        visited[i] = malloc(sizeof(int) * t->c);
       72:   28:        for (int j = 0; j < t->c; j++)
       54:   29:            if (t->tabela[i][j] == '#')
        -:   30:            {
        6:   31:                visited[i][j] = 1;
        6:   32:                (*count)++; // Atualiza o número de casas visitadas
        -:   33:            }
        -:   34:            else
       48:   35:                visited[i][j] = 0;
        -:   36:    }
        6:   37:    return visited;
        -:   38:}
        -:   39:
        8:   40:void initQueue(CQUEUE q)
        -:   41:{
        8:   42:    q->capacidade = 3;
        8:   43:    q->tamanho = 0;
        8:   44:    q->front = 0;
        8:   45:    q->list = malloc(sizeof(COORDENADA) * q->capacidade);
        8:   46:}
        -:   47:
        -:   48:// Função responsável por inserir um array de coordenadas na queue
       40:   49:int insertQueue(CQUEUE q, COORDENADA *coordenadas, int coordSize)
        -:   50:{
       40:   51:    if (coordSize < 1)
        -:   52:        return 1;
       20:   53:    int tam = q->tamanho + coordSize;
       20:   54:    if (tam >= q->capacidade)
        -:   55:    {
        -:   56:        int oldCapacity = q->capacidade;
        8:   57:        while (tam >= q->capacidade)
        4:   58:            q->capacidade = q->capacidade == 0 ? 1 : q->capacidade * 2; // aumenta a capacidade até ter espaço para os novos elementos
        4:   59:        COORDENADA *temp = realloc(q->list, sizeof(COORDENADA) * q->capacidade);
        4:   60:        if (temp == NULL)
        -:   61:        {
        -:   62:            return 0;
        -:   63:        }
        4:   64:        q->list = temp;
        4:   65:        int end = q->front + q->tamanho;
        4:   66:        if (end > oldCapacity)
    #####:   67:            for (int i = 0; i < end % oldCapacity; i++)
    #####:   68:                q->list[i + oldCapacity] = q->list[i]; // volta a colocar a queue direita
        -:   69:    }
       58:   70:    for (int i = 0; i < coordSize; i++)
        -:   71:    {
       38:   72:        q->list[(q->front + q->tamanho) % q->capacidade] = coordenadas[i];
       38:   73:        q->tamanho++;
        -:   74:    }
        -:   75:    return 1;
        -:   76:}
        -:   77:
        -:   78:// Função que remove o elemento da frente da queue
       34:   79:void deleteQueue(CQUEUE q, COORDENADA *pos)
        -:   80:{
       34:   81:    if (q->tamanho == 0)
        -:   82:        return;
        -:   83:    // retira o elemento da frente, mas não o free — é mais tarde na existeCaminhoOrtogonal
       34:   84:    COORDENADA temp = q->list[q->front];
       34:   85:    *pos = temp;
       34:   86:    q->list[q->front] = NULL;
       34:   87:    q->front = (q->front + 1) % q->capacidade;
       34:   88:    q->tamanho--;
        -:   89:}
        -:   90:
        -:   91:// Função que dado uma lista de visitados devolve um array com as posições que não foram visitadas
    #####:   92:COORDENADA *devolveNaoVisitados(int **visited, int l, int c, int length)
        -:   93:{
    #####:   94:    COORDENADA *naoVisitados = malloc(sizeof(COORDENADA) * length);
    #####:   95:    int cont = 0;
    #####:   96:    for (int i = 0; i < l; i++)
        -:   97:    {
    #####:   98:        for (int j = 0; j < c; j++)
        -:   99:        {
    #####:  100:            if (visited[i][j] == 0)
        -:  101:            {
    #####:  102:                COORDENADA pos = malloc(sizeof(struct Coordenada));
    #####:  103:                pos->l = i;
    #####:  104:                pos->c = j;
    #####:  105:                naoVisitados[cont++] = pos;
        -:  106:            }
        -:  107:        }
        -:  108:    }
    #####:  109:    return naoVisitados;
        -:  110:}
        -:  111:
        -:  112:// Algoritmo de procura em largura
        4:  113:int existeCaminhoOrtogonal(CQUEUE q, TABELA t, int **visited, int *count)
        -:  114:{
        4:  115:    int direcoes[4][2] = {
        -:  116:        {-1, 0}, // Cima
        -:  117:        {1, 0},  // Baixo
        -:  118:        {0, -1}, // Esquerda
        -:  119:        {0, 1}   // Direita
        -:  120:    };
       36:  121:    while (q->tamanho > 0)
        -:  122:    {
       32:  123:        COORDENADA atual = NULL;
       32:  124:        deleteQueue(q, &atual); // passa o endereço de 'atual' (COORDENADA*) -> e pegamos no elemento que esta na frente da fila
        -:  125:
       32:  126:        visited[atual->l][atual->c] = 1; // Visitamos a atual;
       32:  127:        (*count)++;
       32:  128:        int numeroVizinhosValidos = 0;
       32:  129:        COORDENADA *vizinhos = malloc(4 * sizeof(COORDENADA)); // no máximo existem 4 vizinhos válidos
      160:  130:        for (int i = 0; i < 4; i++)
        -:  131:        {
      128:  132:            int linha = direcoes[i][0] + atual->l;
      128:  133:            int coluna = direcoes[i][1] + atual->c;
        -:  134:
      128:  135:            if (dentroDosLimites(t, linha, coluna) && visited[linha][coluna] == 0)
        -:  136:            {
       28:  137:                COORDENADA pos = malloc(sizeof(struct Coordenada));
       28:  138:                pos->l = linha;
       28:  139:                pos->c = coluna;
       28:  140:                vizinhos[numeroVizinhosValidos] = pos;
       28:  141:                visited[linha][coluna] = 1; // Tenho que marcar aqui para que nas proximas iterações ja se saiba que esta já esta na queue não voltar a entrar
       28:  142:                numeroVizinhosValidos++;
        -:  143:            }
        -:  144:        }
       32:  145:        insertQueue(q, vizinhos, numeroVizinhosValidos); // já trata do caso de não ter qualquer elemento
       32:  146:        free(atual);
       32:  147:        free(vizinhos);
        -:  148:    }
        4:  149:    if (*count == t->c * t->l)
        4:  150:        return 1;
        -:  151:    return 0;
        -:  152:}
        -:  153:
    #####:  154:void escreveInexistenciaCaminho(bool *temRestricoes, bool escreve, int *contaRestricoes, TABELA t, int **visited, int colunaI, int linhaI, int count)
        -:  155:{
    #####:  156:    *temRestricoes = true;
    #####:  157:    if (escreve)
        -:  158:    {
    #####:  159:        printf("\n---- Restrição nº %d ----\n", *contaRestricoes + 1);
    #####:  160:        printf("Não existe um caminho ortogonal entre todas as casas que não estão riscadas\n");
        -:  161:    }
    #####:  162:    (*contaRestricoes)++;
    #####:  163:    int length = t->c * t->l - count;
    #####:  164:    COORDENADA *naoVisitados = devolveNaoVisitados(visited, t->l, t->c, length);
    #####:  165:    if (escreve)
    #####:  166:        printf("Por exemplo, começando da casa (%c%d) não existe um caminho ortogonal que passe nas casas:\n", colunaI + 'a', linhaI + 1);
    #####:  167:    for (int i = 0; i < length; i++)
        -:  168:    {
    #####:  169:        if (escreve)
    #####:  170:            printf("  - Coluna: %c, Linha: %d\n", naoVisitados[i]->c + 'a', naoVisitados[i]->l + 1);
    #####:  171:        free(naoVisitados[i]);
        -:  172:    }
    #####:  173:    free(naoVisitados);
    #####:  174:}
        -:  175:
        2:  176:bool trataCaminhoOrtogonal(TABELA t, int *contaRestricoes, bool *temRestricoes, bool escreve)
        -:  177:{
        2:  178:    CQUEUE queue = malloc(sizeof(struct CQueue));
        2:  179:    initQueue(queue);
        -:  180:
        2:  181:    COORDENADA inicial = devolvePrimeroNRiscado(t);
        2:  182:    if (inicial == NULL)
        -:  183:    {
    #####:  184:        free(queue->list);
    #####:  185:        free(queue);
    #####:  186:        return true;
        -:  187:    }
        2:  188:    int linhaI = inicial->l;
        2:  189:    int colunaI = inicial->c;
        -:  190:
        2:  191:    COORDENADA *primeiro = malloc(sizeof(COORDENADA)); // Array do com o primeiro elemento a queue já ter elementos antes de se chamar existeCaminhoOrtogonal
        2:  192:    primeiro[0] = inicial;
        2:  193:    insertQueue(queue, primeiro, 1);
        -:  194:
        2:  195:    int count = 0;
        2:  196:    int **visited = initVisited(t, &count);
        2:  197:    if (!existeCaminhoOrtogonal(queue, t, visited, &count))
        -:  198:    {
    #####:  199:        escreveInexistenciaCaminho(temRestricoes, escreve, contaRestricoes, t, visited, colunaI, linhaI, count);
        -:  200:    }
        -:  201:
        2:  202:    free(primeiro);
        8:  203:    for (int i = 0; i < t->l; i++)
        6:  204:        free(visited[i]);
        2:  205:    free(visited);
        -:  206:
        2:  207:    free(queue->list);
        2:  208:    free(queue);
        -:  209:
        2:  210:    return true;
        -:  211:}
