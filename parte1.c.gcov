        -:    0:Source:parte1/parte1.c
        -:    0:Graph:parte1/parte1.gcno
        -:    0:Data:parte1/parte1.gcda
        -:    0:Runs:5
        -:    1:#include <assert.h>
        -:    2:#include <stdbool.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include <string.h>
        -:    6:#include "../tipos.h"
        -:    7:#include <ctype.h> // Para toupper
        -:    8:#include "../parte2/parte2.h"
        -:    9:#include "../parte4/parte4.h"
        -:   10:#include "../colors.h"
        -:   11:#define LINE_SIZE 1024
        -:   12:
        -:   13:// Função que cria e aloca o tabuleiro com as dimensões fornecidas
       50:   14:void initTabela(TABELA t, int l, int c)
        -:   15:{
       50:   16:    t->l = l;
       50:   17:    t->c = c;
       50:   18:    t->tabela = malloc(l * sizeof(char *));
      165:   19:    for (int i = 0; i < l; i++)
        -:   20:    {
      115:   21:        t->tabela[i] = malloc((c + 1) * sizeof(char)); // + 1 para colocar o '\0'
      525:   22:        for (int j = 0; j <= c; j++)
        -:   23:        {
      410:   24:            if (j == c)
      115:   25:                t->tabela[i][j] = '\0';
        -:   26:            else
      295:   27:                t->tabela[i][j] = ' '; // Inicializa com espaços
        -:   28:        }
        -:   29:    }
       50:   30:}
        -:   31:
        -:   32:// Função para libertar a memória alocada para um tabuleiro
      281:   33:void freeTabela(TABELA t)
        -:   34:{
      281:   35:    if (t == NULL)
        -:   36:        return;
      863:   37:    for (int i = 0; i < t->l; i++)
        -:   38:    {
      582:   39:        free(t->tabela[i]);
        -:   40:    }
      281:   41:    free(t->tabela);
      281:   42:    free(t);
        -:   43:}
        -:   44:
        -:   45:// Tipo de função para comandos. Agora os comandos recebem um GAME* para acessar o estado e o tabuleiro.
        -:   46:typedef bool (*COMANDO)(char cmd, char *arg, GAME *game);
        -:   47:
        -:   48:// Função responsável por escrever no ficheiro o conteúdo de uma tabela
        5:   49:void escreveTabela(TABELA tabela, FILE *f)
        -:   50:{
        5:   51:    fprintf(f, "%d %d\n", tabela->l, tabela->c);
       15:   52:    for (int i = 0; i < tabela->l; i++)
        -:   53:    {
       10:   54:        fprintf(f, "%s\n", tabela->tabela[i]);
        -:   55:    }
        5:   56:    putchar('\n');
        5:   57:}
        -:   58:
        -:   59:// Comando para gravar o estado do jogo num ficheiro
       25:   60:bool gravar(char cmd, char *arg, GAME *game)
        -:   61:{
       25:   62:    if (cmd == 'g')
        -:   63:    {
       20:   64:        if (arg == NULL)
        -:   65:        {
        5:   66:            fprintf(stderr, "%sErro: o comando gravar precisa de um argumento!%s\n", ERROR_COLOR, RESET);
        5:   67:            return false;
        -:   68:        }
       15:   69:        if (game->tab == NULL)
        -:   70:        {
        5:   71:            fprintf(stderr, "%sErro: a tabela não deve ser nula antes de a gravar!%s\n", ERROR_COLOR, RESET);
        5:   72:            return false;
        -:   73:        }
       10:   74:        FILE *f = fopen(arg, "w"); // Abre o ficheiro (caso existe o que estiver lá escrito vai ser sobrescrito)
       10:   75:        if (f == NULL)
        -:   76:        {
        5:   77:            fprintf(stderr, "%sErro: a abrir o ficheiro%s\n", ERROR_COLOR, RESET);
        5:   78:            return false;
        -:   79:        }
       10:   80:        for (int i = 0; i < game->stackTabs->comprimento; i++)
        -:   81:        {
        5:   82:            escreveTabela(game->stackTabs->tabelas[i], f);
        -:   83:        }
        5:   84:        fclose(f);
        5:   85:        printf("Gravado em %s\n", arg);
        5:   86:        return true;
        -:   87:    }
        -:   88:
        -:   89:    return false;
        -:   90:}
        -:   91:
        -:   92:// Comando para sair
       10:   93:bool sair(char cmd, char *arg, GAME *game)
        -:   94:{
       10:   95:    if (arg != NULL)
        -:   96:        return false;
        5:   97:    if (cmd == 's')
        -:   98:    {
        5:   99:        game->estado.looping = false;
        5:  100:        return true;
        -:  101:    }
        -:  102:    return false;
        -:  103:}
        -:  104:
       10:  105:bool leTabuleiro(TABELA *t, int linhas, int colunas, FILE *file)
        -:  106:{
       20:  107:    for (int i = 0; i < linhas; i++)
        -:  108:    {
       40:  109:        for (int j = 0; j < colunas; j++)
        -:  110:        {
       30:  111:            if (fscanf(file, " %c", &(*t)->tabela[i][j]) != 1)
        -:  112:            {
        5:  113:                fprintf(stderr, "%sErro: na leitura do conteúdo do tabuleiro%s\n", ERROR_COLOR, RESET);
        5:  114:                return false;
        -:  115:            }
        -:  116:        }
        -:  117:    }
        -:  118:    return true;
        -:  119:}
        -:  120:
        5:  121:bool colocaTabelaNaStack(GAME *game, TABELA tabela)
        -:  122:{
        5:  123:    if (!insereTabela(game->stackTabs, tabela))
        -:  124:    {
    #####:  125:        if (tabela)
    #####:  126:            freeTabela(tabela);
    #####:  127:        freeStackTabs(game->stackTabs);
    #####:  128:        fprintf(stderr, "%sErro: na criação da stack de tabuleiros%s\n", ERROR_COLOR, RESET);
    #####:  129:        return false;
        -:  130:    }
        -:  131:    return true;
        -:  132:}
        -:  133:
        5:  134:void colocaSolucao(GAME *game)
        -:  135:{
        5:  136:    TABELA aux = resolve(game->stackTabs->tabelas[0]); // Recebe a primeira tabela carregada (em principio so com letras minusculas)
        -:  137:
        5:  138:    TABELA temp = game->solution;
        5:  139:    game->solution = aux;
        5:  140:    if (temp != NULL)
    #####:  141:        freeTabela(temp);
        5:  142:}
        -:  143:
        -:  144:// Comando para ler o tabuleiro de um ficheiro
       30:  145:bool lerCmd(char cmd, char *arg, GAME *game)
        -:  146:{
       30:  147:    if (cmd != 'l' || arg == NULL)
        -:  148:        return false;
        -:  149:
       20:  150:    FILE *file = fopen(arg, "r"); // r é para leitura
       20:  151:    if (!file)
        -:  152:    {
        5:  153:        fprintf(stderr, "%sErro: ao abrir o ficheiro %s para leitura%s\n", ERROR_COLOR, arg, RESET);
        5:  154:        return false;
        -:  155:    }
        -:  156:
       15:  157:    freeStackTabs(game->stackTabs);
       15:  158:    STACKTABS s = malloc(sizeof(struct StackTabs));
       15:  159:    if (!initStackTabs(s))
        -:  160:    {
    #####:  161:        free(s);
    #####:  162:        return false;
        -:  163:    }
       15:  164:    game->stackTabs = s;
        -:  165:
       15:  166:    int linhas, colunas;
        -:  167:    // Loop que le os vários tabuleiros enquanto o ficheiro não estiver vazio e coloca-os na stackTabs
       20:  168:    while (fscanf(file, "%d %d", &linhas, &colunas) == 2)
        -:  169:    {
       10:  170:        TABELA t = malloc(sizeof(struct Tabela));
        -:  171:
       10:  172:        initTabela(t, linhas, colunas);
        -:  173:
        -:  174:        // Lê o conteúdo do tabuleiro do ficheiro e passa-o para a tabela t
       10:  175:        if (!leTabuleiro(&t, linhas, colunas, file) || !colocaTabelaNaStack(game, t))
        -:  176:        {
        5:  177:            freeTabela(t);
        5:  178:            freeStackTabs(s);
        5:  179:            fclose(file);
        5:  180:            return false;
        -:  181:        }
        -:  182:    }
       10:  183:    if (game->stackTabs->comprimento == 0)
        -:  184:    {
        5:  185:        printf("%sErro: o ficheiro não contem nenhum tabuleiro%s", ERROR_COLOR, RESET);
        5:  186:        fclose(file);
        5:  187:        return false;
        -:  188:    }
        -:  189:
        5:  190:    fclose(file);
        5:  191:    if (game->tab != NULL)
    #####:  192:        freeTabela(game->tab);
        5:  193:    TABELA temp = copiarTabela(game->stackTabs->tabelas[game->stackTabs->comprimento - 1]);
        -:  194:
        5:  195:    if (temp != NULL)
        5:  196:        game->tab = temp;
        -:  197:    else
        -:  198:        return false;
        5:  199:    colocaSolucao(game);
        -:  200:
        5:  201:    return true;
        -:  202:}
        -:  203:
        -:  204:// Converte coordenada do formato "a3" para  coordenadas (linha e coluna)
       15:  205:bool coordenadaParaIndice(const char *coord, int *linha, int *coluna)
        -:  206:{
       15:  207:    if (strlen(coord) < 2)
        -:  208:        return false;
       10:  209:    *coluna = coord[0] - 'a';     // 'a' corresponde à coluna 0
       10:  210:    *linha = atoi(coord + 1) - 1; // atoi (ascii to integer):  atoi -> converte uma string para um int   NOTA (coord + 1) é para comecar na segunda letra da string, e tirmaos 1, por causa do indice zero
       10:  211:    return true;
        -:  212:}
        -:  213:
        -:  214:// Pinta de branco (transforma para maiuscula)
       20:  215:bool pintarBranco(TABELA t, int linha, int coluna, TABELA p)  // p é a primeira tabela carregada
        -:  216:{
       20:  217:    if (linha >= 0 && linha < t->l && coluna >= 0 && coluna < t->c)
        -:  218:    {
       10:  219:        if (t->tabela[linha][coluna] != '#')
        5:  220:            t->tabela[linha][coluna] = toupper(t->tabela[linha][coluna]);
        5:  221:        else t->tabela[linha][coluna] = toupper (p->tabela[linha][coluna]);
       10:  222:        return true;
        -:  223:    }
        -:  224:    return false;
        -:  225:}
        -:  226:
        -:  227:// Risca a casa (substitui por '#')
       15:  228:bool riscar(TABELA t, int linha, int coluna)
        -:  229:{
       15:  230:    if (linha < 0 || linha >= t->l || coluna < 0 || coluna >= t->c)
        -:  231:        return false;
        -:  232:
        5:  233:    t->tabela[linha][coluna] = '#'; // Marca a célula com '#'
        5:  234:    return true;
        -:  235:}
        -:  236:
        -:  237:// Função que mostra o tabuleiro
       10:  238:void mostrarTabela(GAME game, int isC) // isC é uma flag que se for positiva quer dizer que estou a invocar o comando c
        -:  239:{
       10:  240:    TABELA t = game.tab;
       10:  241:    TABELA s = game.solution;
       10:  242:    if (!isC)
       10:  243:        printf("\n%sEstado atual do tabuleiro:%s\n", COMMAND_COLOR, RESET);
       10:  244:    if (t == NULL)
        -:  245:    {
        5:  246:        printf("%sTabuleiro não inicializado.%s\n", ERROR_COLOR, RESET);
        5:  247:        return;
        -:  248:    }
        -:  249:
        -:  250:    // Desenha os headers (a, b, c, ..)
        5:  251:    printf("    ");
       20:  252:    for (int j = 0; j < t->c; j++)
       15:  253:        printf(" %s%c%s  ", COORDINATE_COLOR, 'a' + j, RESET);
        5:  254:    printf("\n");
        -:  255:
        -:  256:    // Desenha a primeira linha da tabela
        5:  257:    printf("   ┏");
       20:  258:    for (int j = 0; j < t->c; j++)
       30:  259:        printf("━━━%s", (j == t->c - 1) ? "┓\n" : "┳");
        -:  260:
       20:  261:    for (int i = 0; i < t->l; i++)
        -:  262:    {
        -:  263:        // Escreve o numero da linha
       15:  264:        printf("%s%2d%s ┃", COORDINATE_COLOR, i + 1, RESET);
        -:  265:
       60:  266:        for (int j = 0; j < t->c; j++)
        -:  267:        {
       45:  268:            char cell = t->tabela[i][j];
       45:  269:            int igual = t->tabela[i][j] == s->tabela[i][j];
       45:  270:            if (cell == '#')
        -:  271:            {
    #####:  272:                isC ? printf("%s # %s", igual ? CAPITAL_GREEN : CAPITAL_RED, RESET) : printf("%s # %s", HASHED_CELL, RESET);
        -:  273:            }
       45:  274:            else if (isupper(cell))
        -:  275:            {
      45*:  276:                isC ? printf("%s[%c]%s", igual ? CAPITAL_GREEN : CAPITAL_RED, cell, RESET) : printf("%s[%c]%s", CAPITAL_LETTER, cell, RESET);
        -:  277:            }
        -:  278:            else
    #####:  279:                printf(" %s%c%s ", NORMAL_LETTER, cell, RESET);
       45:  280:            printf("┃");
        -:  281:        }
       15:  282:        printf("\n");
        -:  283:
       15:  284:        if (i < t->l - 1)
        -:  285:        {
        -:  286:            // Desenha linha entre as diferentes linhas do tabuleiro
       10:  287:            printf("   ┣");
       40:  288:            for (int j = 0; j < t->c; j++)
       60:  289:                printf("━━━%s", (j == t->c - 1) ? "┫\n" : "╋");
        -:  290:        }
        -:  291:    }
        -:  292:
        -:  293:    // Desenha a linha inferior
        5:  294:    printf("   ┗");
       20:  295:    for (int j = 0; j < t->c; j++)
       30:  296:        printf("━━━%s", (j == t->c - 1) ? "┛\n" : "┻");
        5:  297:    printf("\n");
        -:  298:}
